// Code generated by MockGen. DO NOT EDIT.
// Source: semaphore.go
//
// Generated by this command:
//
//	mockgen -source=semaphore.go -destination=semaphore_mock.go -package=semaphore
//

// Package semaphore is a generated GoMock package.
package semaphore

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockISemaphore is a mock of ISemaphore interface.
type MockISemaphore struct {
	ctrl     *gomock.Controller
	recorder *MockISemaphoreMockRecorder
	isgomock struct{}
}

// MockISemaphoreMockRecorder is the mock recorder for MockISemaphore.
type MockISemaphoreMockRecorder struct {
	mock *MockISemaphore
}

// NewMockISemaphore creates a new mock instance.
func NewMockISemaphore(ctrl *gomock.Controller) *MockISemaphore {
	mock := &MockISemaphore{ctrl: ctrl}
	mock.recorder = &MockISemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISemaphore) EXPECT() *MockISemaphoreMockRecorder {
	return m.recorder
}

// AcquireMemoryWeight mocks base method.
func (m *MockISemaphore) AcquireMemoryWeight(ctx context.Context, weight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireMemoryWeight", ctx, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireMemoryWeight indicates an expected call of AcquireMemoryWeight.
func (mr *MockISemaphoreMockRecorder) AcquireMemoryWeight(ctx, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireMemoryWeight", reflect.TypeOf((*MockISemaphore)(nil).AcquireMemoryWeight), ctx, weight)
}

// ReleaseMemoryWeight mocks base method.
func (m *MockISemaphore) ReleaseMemoryWeight(weight int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseMemoryWeight", weight)
}

// ReleaseMemoryWeight indicates an expected call of ReleaseMemoryWeight.
func (mr *MockISemaphoreMockRecorder) ReleaseMemoryWeight(weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseMemoryWeight", reflect.TypeOf((*MockISemaphore)(nil).ReleaseMemoryWeight), weight)
}
