// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/checkmarx/2ms/v4/plugins (interfaces: ConfluenceClient)
//
// Generated by this command:
//
//	mockgen -destination=confluence_client_mock_test.go -package=plugins github.com/checkmarx/2ms/v4/plugins ConfluenceClient
//

// Package plugins is a generated GoMock package.
package plugins

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfluenceClient is a mock of ConfluenceClient interface.
type MockConfluenceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfluenceClientMockRecorder
	isgomock struct{}
}

// MockConfluenceClientMockRecorder is the mock recorder for MockConfluenceClient.
type MockConfluenceClientMockRecorder struct {
	mock *MockConfluenceClient
}

// NewMockConfluenceClient creates a new mock instance.
func NewMockConfluenceClient(ctrl *gomock.Controller) *MockConfluenceClient {
	mock := &MockConfluenceClient{ctrl: ctrl}
	mock.recorder = &MockConfluenceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfluenceClient) EXPECT() *MockConfluenceClientMockRecorder {
	return m.recorder
}

// FetchPageAtVersion mocks base method.
func (m *MockConfluenceClient) FetchPageAtVersion(ctx context.Context, pageID string, version int) (*Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPageAtVersion", ctx, pageID, version)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPageAtVersion indicates an expected call of FetchPageAtVersion.
func (mr *MockConfluenceClientMockRecorder) FetchPageAtVersion(ctx, pageID, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPageAtVersion", reflect.TypeOf((*MockConfluenceClient)(nil).FetchPageAtVersion), ctx, pageID, version)
}

// WalkAllPages mocks base method.
func (m *MockConfluenceClient) WalkAllPages(ctx context.Context, limit int, visit func(*Page) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkAllPages", ctx, limit, visit)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkAllPages indicates an expected call of WalkAllPages.
func (mr *MockConfluenceClientMockRecorder) WalkAllPages(ctx, limit, visit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkAllPages", reflect.TypeOf((*MockConfluenceClient)(nil).WalkAllPages), ctx, limit, visit)
}

// WalkPageVersions mocks base method.
func (m *MockConfluenceClient) WalkPageVersions(ctx context.Context, pageID string, limit int, visit func(int) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkPageVersions", ctx, pageID, limit, visit)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkPageVersions indicates an expected call of WalkPageVersions.
func (mr *MockConfluenceClientMockRecorder) WalkPageVersions(ctx, pageID, limit, visit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkPageVersions", reflect.TypeOf((*MockConfluenceClient)(nil).WalkPageVersions), ctx, pageID, limit, visit)
}

// WalkPagesByIDs mocks base method.
func (m *MockConfluenceClient) WalkPagesByIDs(ctx context.Context, pageIDs []string, limit int, visit func(*Page) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkPagesByIDs", ctx, pageIDs, limit, visit)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkPagesByIDs indicates an expected call of WalkPagesByIDs.
func (mr *MockConfluenceClientMockRecorder) WalkPagesByIDs(ctx, pageIDs, limit, visit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkPagesByIDs", reflect.TypeOf((*MockConfluenceClient)(nil).WalkPagesByIDs), ctx, pageIDs, limit, visit)
}

// WalkPagesBySpaceIDs mocks base method.
func (m *MockConfluenceClient) WalkPagesBySpaceIDs(ctx context.Context, spaceIDs []string, limit int, visit func(*Page) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkPagesBySpaceIDs", ctx, spaceIDs, limit, visit)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkPagesBySpaceIDs indicates an expected call of WalkPagesBySpaceIDs.
func (mr *MockConfluenceClientMockRecorder) WalkPagesBySpaceIDs(ctx, spaceIDs, limit, visit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkPagesBySpaceIDs", reflect.TypeOf((*MockConfluenceClient)(nil).WalkPagesBySpaceIDs), ctx, spaceIDs, limit, visit)
}

// WalkSpacesByKeys mocks base method.
func (m *MockConfluenceClient) WalkSpacesByKeys(ctx context.Context, spaceKeys []string, limit int, visit func(*Space) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkSpacesByKeys", ctx, spaceKeys, limit, visit)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkSpacesByKeys indicates an expected call of WalkSpacesByKeys.
func (mr *MockConfluenceClientMockRecorder) WalkSpacesByKeys(ctx, spaceKeys, limit, visit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkSpacesByKeys", reflect.TypeOf((*MockConfluenceClient)(nil).WalkSpacesByKeys), ctx, spaceKeys, limit, visit)
}

// WikiBaseURL mocks base method.
func (m *MockConfluenceClient) WikiBaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WikiBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// WikiBaseURL indicates an expected call of WikiBaseURL.
func (mr *MockConfluenceClientMockRecorder) WikiBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WikiBaseURL", reflect.TypeOf((*MockConfluenceClient)(nil).WikiBaseURL))
}
