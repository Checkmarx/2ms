// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/checkmarx/2ms/v3/plugins (interfaces: ISourceItem)
//
// Generated by this command:
//
//	mockgen -destination=plugins_mock_test.go -package=engine github.com/checkmarx/2ms/v3/plugins ISourceItem
//

// Package engine is a generated GoMock package.
package engine

import (
	reflect "reflect"

	plugins "github.com/checkmarx/2ms/v3/plugins"
	gomock "go.uber.org/mock/gomock"
)

// MockISourceItem is a mock of ISourceItem interface.
type MockISourceItem struct {
	ctrl     *gomock.Controller
	recorder *MockISourceItemMockRecorder
	isgomock struct{}
}

// MockISourceItemMockRecorder is the mock recorder for MockISourceItem.
type MockISourceItemMockRecorder struct {
	mock *MockISourceItem
}

// NewMockISourceItem creates a new mock instance.
func NewMockISourceItem(ctrl *gomock.Controller) *MockISourceItem {
	mock := &MockISourceItem{ctrl: ctrl}
	mock.recorder = &MockISourceItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISourceItem) EXPECT() *MockISourceItemMockRecorder {
	return m.recorder
}

// GetContent mocks base method.
func (m *MockISourceItem) GetContent() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockISourceItemMockRecorder) GetContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockISourceItem)(nil).GetContent))
}

// GetGitInfo mocks base method.
func (m *MockISourceItem) GetGitInfo() *plugins.GitInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitInfo")
	ret0, _ := ret[0].(*plugins.GitInfo)
	return ret0
}

// GetGitInfo indicates an expected call of GetGitInfo.
func (mr *MockISourceItemMockRecorder) GetGitInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitInfo", reflect.TypeOf((*MockISourceItem)(nil).GetGitInfo))
}

// GetID mocks base method.
func (m *MockISourceItem) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockISourceItemMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockISourceItem)(nil).GetID))
}

// GetSource mocks base method.
func (m *MockISourceItem) GetSource() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSource")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSource indicates an expected call of GetSource.
func (mr *MockISourceItemMockRecorder) GetSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSource", reflect.TypeOf((*MockISourceItem)(nil).GetSource))
}
