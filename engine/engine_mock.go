// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go
//
// Generated by this command:
//
//	mockgen -source=engine.go -destination=engine_mock.go -package=engine
//

// Package engine is a generated GoMock package.
package engine

import (
	context "context"
	reflect "reflect"

	secrets "github.com/checkmarx/2ms/v3/lib/secrets"
	plugins "github.com/checkmarx/2ms/v3/plugins"
	gomock "go.uber.org/mock/gomock"
)

// MockIEngine is a mock of IEngine interface.
type MockIEngine struct {
	ctrl     *gomock.Controller
	recorder *MockIEngineMockRecorder
	isgomock struct{}
}

// MockIEngineMockRecorder is the mock recorder for MockIEngine.
type MockIEngineMockRecorder struct {
	mock *MockIEngine
}

// NewMockIEngine creates a new mock instance.
func NewMockIEngine(ctrl *gomock.Controller) *MockIEngine {
	mock := &MockIEngine{ctrl: ctrl}
	mock.recorder = &MockIEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEngine) EXPECT() *MockIEngineMockRecorder {
	return m.recorder
}

// AddRegexRules mocks base method.
func (m *MockIEngine) AddRegexRules(patterns []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRegexRules", patterns)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRegexRules indicates an expected call of AddRegexRules.
func (mr *MockIEngineMockRecorder) AddRegexRules(patterns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRegexRules", reflect.TypeOf((*MockIEngine)(nil).AddRegexRules), patterns)
}

// DetectFile mocks base method.
func (m *MockIEngine) DetectFile(ctx context.Context, item plugins.ISourceItem, secretsChannel chan *secrets.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectFile", ctx, item, secretsChannel)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetectFile indicates an expected call of DetectFile.
func (mr *MockIEngineMockRecorder) DetectFile(ctx, item, secretsChannel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectFile", reflect.TypeOf((*MockIEngine)(nil).DetectFile), ctx, item, secretsChannel)
}

// DetectFragment mocks base method.
func (m *MockIEngine) DetectFragment(item plugins.ISourceItem, secretsChannel chan *secrets.Secret, pluginName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectFragment", item, secretsChannel, pluginName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetectFragment indicates an expected call of DetectFragment.
func (mr *MockIEngineMockRecorder) DetectFragment(item, secretsChannel, pluginName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectFragment", reflect.TypeOf((*MockIEngine)(nil).DetectFragment), item, secretsChannel, pluginName)
}

// GetRuleBaseRiskScore mocks base method.
func (m *MockIEngine) GetRuleBaseRiskScore(ruleId string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleBaseRiskScore", ruleId)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetRuleBaseRiskScore indicates an expected call of GetRuleBaseRiskScore.
func (mr *MockIEngineMockRecorder) GetRuleBaseRiskScore(ruleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleBaseRiskScore", reflect.TypeOf((*MockIEngine)(nil).GetRuleBaseRiskScore), ruleId)
}

// RegisterForValidation mocks base method.
func (m *MockIEngine) RegisterForValidation(secret *secrets.Secret) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterForValidation", secret)
}

// RegisterForValidation indicates an expected call of RegisterForValidation.
func (mr *MockIEngineMockRecorder) RegisterForValidation(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForValidation", reflect.TypeOf((*MockIEngine)(nil).RegisterForValidation), secret)
}

// Score mocks base method.
func (m *MockIEngine) Score(secret *secrets.Secret, validateFlag bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Score", secret, validateFlag)
}

// Score indicates an expected call of Score.
func (mr *MockIEngineMockRecorder) Score(secret, validateFlag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockIEngine)(nil).Score), secret, validateFlag)
}

// Validate mocks base method.
func (m *MockIEngine) Validate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Validate")
}

// Validate indicates an expected call of Validate.
func (mr *MockIEngineMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIEngine)(nil).Validate))
}
